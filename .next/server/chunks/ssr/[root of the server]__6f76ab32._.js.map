{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///Users/kushsharma/Desktop/projects/Sales%20Forecasting%20Dashboard/final%20sales%20forcast%20project/Sales-Forecast-Request-Dashboard/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/kushsharma/Desktop/projects/Sales%20Forecasting%20Dashboard/final%20sales%20forcast%20project/Sales-Forecast-Request-Dashboard/src/ai/flows/sales-forcast-prompt.ts"],"sourcesContent":["// SalesForecastFromPrompt\n'use server';\n/**\n * @fileOverview An AI agent that forecasts sales based on a user-provided prompt.\n *\n * - forecastSalesFromPrompt - A function that handles the sales forecast generation process.\n * - ForecastSalesInput - The input type for the forecastSalesFromPrompt function.\n * - ForecastSalesOutput - The return type for the forecastSalesFromPrompt function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ForecastSalesInputSchema = z.object({\n  productDescription: z\n    .string()\n    .describe('A description of the product and any observed sales trends.'),\n});\nexport type ForecastSalesInput = z.infer<typeof ForecastSalesInputSchema>;\n\nconst ForecastSalesOutputSchema = z.object({\n  forecastSummary: z.string().describe('A summary of the sales forecast.'),\n});\nexport type ForecastSalesOutput = z.infer<typeof ForecastSalesOutputSchema>;\n\nexport async function forecastSalesFromPrompt(input: ForecastSalesInput): Promise<ForecastSalesOutput> {\n  return forecastSalesFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'forecastSalesPrompt',\n  input: {schema: ForecastSalesInputSchema},\n  output: {schema: ForecastSalesOutputSchema},\n  prompt: `You are a sales forecasting expert. Based on the following product description and sales trends, provide a sales forecast summary. Be brief and to the point.\n\nProduct Description and Sales Trends: {{{productDescription}}}`,\n});\n\nconst forecastSalesFlow = ai.defineFlow(\n  {\n    name: 'forecastSalesFlow',\n    inputSchema: ForecastSalesInputSchema,\n    outputSchema: ForecastSalesOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;;AAE1B;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,oBAAoB,uIAAA,CAAA,IAAC,CAClB,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvC;AAGO,eAAe,uCAAqB,GAArB,wBAAwB,KAAyB;IACrE,OAAO,kBAAkB;AAC3B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAwB;IACxC,QAAQ;QAAC,QAAQ;IAAyB;IAC1C,QAAQ,CAAC;;8DAEmD,CAAC;AAC/D;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAtBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file:///Users/kushsharma/Desktop/projects/Sales%20Forecasting%20Dashboard/final%20sales%20forcast%20project/Sales-Forecast-Request-Dashboard/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { forecastSalesFromPrompt, type ForecastSalesInput, type ForecastSalesOutput } from '@/ai/flows/sales-forcast-prompt';\nimport { z } from 'zod';\n\nconst GenerateForecastActionInputSchema = z.object({\n  productDescription: z.string().min(10, \"Product description must be at least 10 characters long.\"),\n});\n\nexport async function generateForecastAction(\n  input: z.infer<typeof GenerateForecastActionInputSchema>\n): Promise<{ success: boolean; data?: ForecastSalesOutput; error?: string }> {\n  try {\n    const validatedInput = GenerateForecastActionInputSchema.parse(input);\n    const forecastInput: ForecastSalesInput = {\n      productDescription: validatedInput.productDescription,\n    };\n    const result = await forecastSalesFromPrompt(forecastInput);\n    return { success: true, data: result };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return { success: false, error: error.errors.map(e => e.message).join(', ') };\n    }\n    console.error('Error generating forecast:', error);\n    return { success: false, error: 'Failed to generate forecast. Please try again.' };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEA,MAAM,oCAAoC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;AACzC;AAEO,eAAe,uCAAoB,GAApB,uBACpB,KAAwD;IAExD,IAAI;QACF,MAAM,iBAAiB,kCAAkC,KAAK,CAAC;QAC/D,MAAM,gBAAoC;YACxC,oBAAoB,eAAe,kBAAkB;QACvD;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,gJAAA,CAAA,0BAAuB,AAAD,EAAE;QAC7C,OAAO;YAAE,SAAS;YAAM,MAAM;QAAO;IACvC,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,oIAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO;gBAAE,SAAS;gBAAO,OAAO,MAAM,MAAM,CAAC,GAAG,CAAC,CAAA,IAAK,EAAE,OAAO,EAAE,IAAI,CAAC;YAAM;QAC9E;QACA,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YAAE,SAAS;YAAO,OAAO;QAAiD;IACnF;AACF;;;IAjBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["file:///Users/kushsharma/Desktop/projects/Sales%20Forecasting%20Dashboard/final%20sales%20forcast%20project/Sales-Forecast-Request-Dashboard/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///Users/kushsharma/Desktop/projects/Sales%20Forecasting%20Dashboard/final%20sales%20forcast%20project/Sales-Forecast-Request-Dashboard/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}